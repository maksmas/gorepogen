package generator

import (
	"fmt"
	h "gorepogen/internal/helper"
	rc "gorepogen/internal/repocomp"
	"os"
	"path/filepath"
	"strings"

	j "github.com/dave/jennifer/jen"
)

func ResolveNamesRegistry(entityInfo *h.EntityInfo) h.NamesRegistry {
	entityNameUncapitalized := strings.ToLower(entityInfo.Name)
	entityName := entityInfo.Name
	return h.NamesRegistry{
		EntityName:            entityName,
		PackageName:           entityInfo.Package,
		FullPackageName:       entityInfo.FullPackagePath,
		EntityNameWithPackage: fmt.Sprintf("%s.%s", entityInfo.Package, entityName),
		InterfaceName:         fmt.Sprintf("%sRepository", entityName),
		ConstructorName:       fmt.Sprintf("New%sRepository", entityName),
		StructName:            fmt.Sprintf("%sRepository", entityNameUncapitalized),
		ReceiveName:           fmt.Sprintf("r %sRepository", entityNameUncapitalized),
		FileName:              fmt.Sprintf("%s_repository.go", entityNameUncapitalized),
		RepositoryPackageName: "repository",
	}
}

func AssignNamesToComponents(namesRegistry h.NamesRegistry) []h.Appender {
	return []h.Appender{
		rc.NewInterface(namesRegistry.GetInterfaceNames()),
		rc.NewStruct(namesRegistry.GetStructNames()),
		rc.NewConstructor(namesRegistry.GetConstructorNames()),
		rc.NewMethodsList(namesRegistry.GetMethodListNames()),
	}
}

func Generate(components []h.Appender, namesRegistry h.NamesRegistry, currentDir string) (string, error) {

	repositoryPackageName := namesRegistry.RepositoryPackageName
	file := j.NewFile(repositoryPackageName)
	file.HeaderComment("THIS FILE IS AUTOGENERATED. GOREPOGEN 1.0.0")
	file.ImportName("github.com/jinzhu/gorm", "gorm")
	file.ImportName(namesRegistry.FullPackageName, namesRegistry.PackageName)

	for _, c := range components {
		c.AppendTo(file)
	}

	repositoryDir := makeRepositoryDir(currentDir, repositoryPackageName)
	repositoryFullPath := filepath.Join(repositoryDir, namesRegistry.FileName)

	return repositoryFullPath, file.Save(repositoryFullPath)
}

func makeRepositoryDir(currentDir string, repositoryPackageName string) string {
	repositoryDir := filepath.Join(currentDir, repositoryPackageName)
	_ = os.MkdirAll(repositoryDir, os.ModePerm)
	return repositoryDir
}
